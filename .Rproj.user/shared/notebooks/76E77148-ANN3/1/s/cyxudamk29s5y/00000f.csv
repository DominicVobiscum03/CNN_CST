"0","# read in sinogram data"
"0","sino <- read.csv('raw_data/65sin.csv')"
"0","sino <- sino[, -c(1)]"
"0","# number of projections"
"0","nAngle  <- ncol(sino)"
"0","# number of detectors"
"0","nDetect <- nrow(sino)"
"0","# Degrees between projections"
"0","angleStep <- 180/(nAngle-1) "
"0","# compute angle of each projection in sinogram"
"0","degree <- data.frame(angle = seq(0,nAngle-1)*angleStep) "
"0",""
"0","# initialize weights"
"0","nn <- list()"
"0","nn$weights <- list()"
"0",""
"0","nn$weights[[1]] <- matrix(0, nrow = 16, ncol = 2)"
"0","nn$weights[[2]] <- matrix(0, nrow = 3, ncol = 1)"
"0","error <- matrix(nrow = 1, ncol = 0)"
"0","for (i in 1:length(output)){"
"0","   # compute shift of sinogram detector positions for each projection based on current image pixel"
"0","   degree$pixel <- round(x[i]*cos(pi*degree$angle/180) + z[i]*sin(pi*degree$angle/180))"
"0","   # transpose the sinogram"
"0","   tsino <- t(sino)"
"0","   # create a space with dimension tsino"
"0","   ssino <- tsino   "
"0",""
"0","   ######################################################## SHIFT SUM FLIP "
"0","   # Perform shift according to dShift"
"0","   for (j in 1:nAngle){ "
"0","      shift_amount <- degree$pixel[j]"
"0","      shifted_row <- circshift(tsino[j, ], shift_amount)"
"0","      ssino[j, ] <- shifted_row"
"0","      }"
"0","   # perform summation"
"0","   f_vector <- colSums(ssino) "
"0","   # perform flip"
"0","   z_vector <- rev(f_vector)  "
"0","   "
"0","   ################################################################## DATA"
"0","   data <- t(as_tibble(c(z_vector, output[i])))"
"0","   # Define names of the columns for the data to used by function "
"0","   ANN_names <- c(paste0(""z"",(as.character(c(seq(1:nDetect))))),""o"") "
"0","  "
"0","    colnames(data) <- ANN_names"
"0","   ############################################################### FORMULA"
"0","   f <- as.formula(paste(ANN_names[nDetect+1],"
"0","                         ""~"","
"0","                         paste(ANN_names[!ANN_names %in% ""o""], collapse = "" + "")"
"0","                         )"
"0","                   ) "
"0","   ############################################################ NEURAL NET"
"0","   nn <-neuralnet(f, data, hidden = 4,"
"0","                  startweights = nn$weights,"
"0","                  algorithm = ""backprop"","
"0","                  learningrate = 0.01)"
"0","   error[i] <- nn$result.matrix[1]"
"0","   }"
"0",""
"0","plot(nn, rep = ""best"")"
